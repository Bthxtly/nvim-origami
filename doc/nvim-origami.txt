*nvim-origami.txt*             For Neovim             Last change: 2025 May 19

==============================================================================
Table of Contents                             *nvim-origami-table-of-contents*

1. nvim-origami                                   |nvim-origami-nvim-origami-|
  - Table of Content             |nvim-origami-nvim-origami--table-of-content|
  - Features                             |nvim-origami-nvim-origami--features|
  - Installation                     |nvim-origami-nvim-origami--installation|
  - Configuration                   |nvim-origami-nvim-origami--configuration|
  - FAQ                                       |nvim-origami-nvim-origami--faq|
  - Credits                               |nvim-origami-nvim-origami--credits|
  - About the developer       |nvim-origami-nvim-origami--about-the-developer|
2. Links                                                  |nvim-origami-links|

==============================================================================
1. nvim-origami                                   *nvim-origami-nvim-origami-*



_Foldwith relentless elegance._ A collection of Quality-of-life features
related to folding.




TABLE OF CONTENT                 *nvim-origami-nvim-origami--table-of-content*

- |nvim-origami-features|
- |nvim-origami-installation|
- |nvim-origami-configuration|
- |nvim-origami-faq|
    - |nvim-origami-folds-are-still-opened|
    - |nvim-origami-debug-folding-issues|
- |nvim-origami-credits|
- |nvim-origami-about-the-developer|


FEATURES                                 *nvim-origami-nvim-origami--features*

  ------------------------------------------------------------------------------------------------------
  opts                                 description                                  requirements
  ------------------------------------ -------------------------------------------- --------------------
  .useLspFoldsWithTreesitterFallback   Use the LSP to provide folds, with           1. not using
                                       Treesitter as fallback if the LSP does not   nvim-ufo (feature is
                                       provide folding info.                        redundant with
                                                                                    nvim-ufo)2. Nvim
                                                                                    0.11

  .foldKeymaps                         Overload the h key which will fold a line    —
                                       when used one the first non-blank character  
                                       of (or before). And overload the l key,      
                                       which will unfold a line when used on a      
                                       folded line.[1] This allows you to ditch zc, 
                                       zo, and za, h and l are all you need.        

  .autoFold                            Automatically fold comments and/or imports   1. not using
                                       when opening a file.                         nvim-ufo (feature is
                                                                                    redundant with
                                                                                    nvim-ufo)2. nvim
                                                                                    0.113. LSP that
                                                                                    provides fold
                                                                                    information

  .foldtextWithLineCount               Add line count to the foldtext, preserving   1. not using
                                       the syntax highlighting of the line.         nvim-ufo (feature is
                                                                                    redundant with
                                                                                    nvim-ufo)2.
                                                                                    Treesitter parser
                                                                                    for the language.

  .pauseFoldsOnSearch                  Pause folds while searching, restore folds   —
                                       when done with searching. (Normally, folds   
                                       are opened when you search for text inside   
                                       them, and stay open afterward.)              

  .keepFoldsAcrossSessions             Remember folds across sessions.              nvim-ufo
  ------------------------------------------------------------------------------------------------------

[1] Technically, unfolding with l is already a built-in vim feature when
vim.opt.foldopen includes hor. However, this plugin still sets up a l
key replicating that behavior, since the built-in version still moves
you to one character to the side, which can be considered a bit
counterintuitive.
The requirements may look detailed, but the plugin works mostly out-of-the-box.
If you are on nvim 0.11+ and do not have `nvim-ufo` installed, all features
except `autoFold` and `keepFoldsAcrossSessions` are enabled by default and work
without any need for additional configuration.

With nvim 0.11+, `nvim-origami` is able to replace most of `nvim-ufo`’s
feature set in a much more lightweight way.


INSTALLATION                         *nvim-origami-nvim-origami--installation*

>lua
    -- lazy.nvim
    {
        "chrisgrieser/nvim-origami",
        event = "VeryLazy",
        opts = {}, -- needed even when using default config
    
        -- recommended: disable vim's auto-folding
        init = function()
            vim.opt.foldlevel = 99
            vim.opt.foldlevelstart = 99
        end,
    },
<


CONFIGURATION                       *nvim-origami-nvim-origami--configuration*

>lua
    -- default settings
    require("origami").setup {
        -- features incompatible with `nvim-ufo`
        useLspFoldsWithTreesitterFallback = not package.loaded["ufo"],
        autoFold = {
            enabled = false,
            kinds = { "comment", "imports" }, ---@type lsp.FoldingRangeKind[]
        },
        foldtextWithLineCount = {
            enabled = not package.loaded["ufo"],
            template = "   %s lines", -- `%s` gets the number of folded lines
            hlgroupForCount = "Comment",
        },
    
        -- can be used with or without `nvim-ufo`
        pauseFoldsOnSearch = true,
        foldKeymaps = {
            setup = true, -- modifies `h` and `l`
            hOnlyOpensOnFirstColumn = false,
        },
    
        -- features requiring `nvim-ufo`
        keepFoldsAcrossSessions = package.loaded["ufo"],
    }
<

If you use other keys than `h` and `l` for vertical movement, set
`opts.foldKeymaps.setup = false` and map the keys yourself:

>lua
    vim.keymap.set("n", "<Left>", function() require("origami").h() end)
    vim.keymap.set("n", "<Right>", function() require("origami").l() end)
<


FAQ                                           *nvim-origami-nvim-origami--faq*


FOLDS ARE STILL OPENED ~

Many formatting plugins open all your folds
<https://www.reddit.com/r/neovim/comments/164gg5v/preserve_folds_when_formatting/>
and unfortunately, there is nothing this plugin can do about it. The only two
tools I am aware of that are able to preserve folds are the efm-language-server
<https://github.com/mattn/efm-langserver> and conform.nvim
<https://github.com/stevearc/conform.nvim>.


DEBUG FOLDING ISSUES ~

>lua
    -- Folds provided by the LSP
    require("origami").inspectLspFolds("special") -- comment & import only
    require("origami").inspectLspFolds("all")
<


CREDITS                                   *nvim-origami-nvim-origami--credits*

- @magnusriga <https://github.com/neovim/neovim/pull/27217#issuecomment-2631614344>
    for the more performant implementation of fold text with highlighting.


ABOUT THE DEVELOPER           *nvim-origami-nvim-origami--about-the-developer*

In my day job, I am a sociologist studying the social mechanisms underlying the
digital economy. For my PhD project, I investigate the governance of the app
economy and how software ecosystems manage the tension between innovation and
compatibility. If you are interested in this subject, feel free to get in
touch.

- Website <https://chris-grieser.de/>
- Mastodon <https://pkm.social/@pseudometa>
- ResearchGate <https://www.researchgate.net/profile/Christopher-Grieser>
- LinkedIn <https://www.linkedin.com/in/christopher-grieser-ba693b17a/>



==============================================================================
2. Links                                                  *nvim-origami-links*

1. *@magnusriga*: 

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
