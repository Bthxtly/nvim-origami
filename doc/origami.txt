*origami.txt*             For NVIM v0.8.0            Last change: 2024 June 01

==============================================================================
Table of Contents                                  *origami-table-of-contents*

1. nvim-origami                                         |origami-nvim-origami|
  - Features                                   |origami-nvim-origami-features|
  - Installation                           |origami-nvim-origami-installation|
  - Configuration                         |origami-nvim-origami-configuration|
  - Limitations                             |origami-nvim-origami-limitations|
  - Other Folding Plugins         |origami-nvim-origami-other-folding-plugins|
  - About the developer             |origami-nvim-origami-about-the-developer|

==============================================================================
1. nvim-origami                                         *origami-nvim-origami*




FEATURES                                       *origami-nvim-origami-features*

- Use `h` at the first non-blank character of a line (or before) to fold. Use
    `l` anywhere on a folded line to unfold it. This allows you to ditch `zc`,
    `zo`, and `za` – you can just use `h` and `l` to work with folds. (`h` still
    moves left if not at the beginning of a line, and `l` still moves right when
    on an unfolded line – this plugin basically "overloads" those keys.)
- Pause folds while searching, restore folds when done with searching.
    (Normally, folds are opened when you search for some text inside a fold, and
    _stay_ open afterward.)
- Remember folds across sessions (and as a side effect, also the cursor position).


  [!NOTE] This plugin only opens and closes folds. It does not provide a
  `foldmethod`. You need to define a `foldmethod` either yourself or through a
  folding provider like `nvim-ufo` for this plugin to work.

INSTALLATION                               *origami-nvim-origami-installation*

>lua
    -- lazy.nvim
    {
        "chrisgrieser/nvim-origami",
        event = "BufReadPost", -- later or on keypress would prevent saving folds
        opts = true, -- needed even when using default config
    },
    
    -- packer
    use {
        "chrisgrieser/nvim-origami",
        config = function () 
            require("origami").setup ({}) -- setup call needed
        end,
    }
<

The `.setup()` call or `lazy`’s `opts` is required. Otherwise, the plugin
works out of the box without any necessary further configuration.


CONFIGURATION                             *origami-nvim-origami-configuration*

>lua
    -- default values
    require("origami").setup {
        keepFoldsAcrossSessions = true,
        pauseFoldsOnSearch = true,
        setupFoldKeymaps = true,
    }
<

_Recommendation:_ By setting |'startofline'| to `true`, bigger movements move
you to the start of the line, which works well with this plugin’s `h` key.

If you use other keys than `h` and `l` for vertical movement, set
`setupFoldKeymaps` to false and map the keys yourself:

>lua
    require("origami").h()
    require("origami").l()
<


LIMITATIONS                                 *origami-nvim-origami-limitations*

Many formatting plugins open all your folds
<https://www.reddit.com/r/neovim/comments/164gg5v/preserve_folds_when_formatting/>
and unfortunately, there is nothing this plugin can do about it. The only two
tools that are able to preserve folds are the efm-language-server
<https://github.com/mattn/efm-langserver> and conform.nvim
<https://github.com/stevearc/conform.nvim>.


OTHER FOLDING PLUGINS             *origami-nvim-origami-other-folding-plugins*

- fold-cycle.nvim <https://github.com/jghauser/fold-cycle.nvim>
- nvim-ufo <https://github.com/kevinhwang91/nvim-ufo>


ABOUT THE DEVELOPER                 *origami-nvim-origami-about-the-developer*

In my day job, I am a sociologist studying the social mechanisms underlying the
digital economy. For my PhD project, I investigate the governance of the app
economy and how software ecosystems manage the tension between innovation and
compatibility. If you are interested in this subject, feel free to get in
touch.

I also occasionally blog about vim: Nano Tips for Vim
<https://nanotipsforvim.prose.sh>

- Academic Website <https://chris-grieser.de/>
- Mastodon <https://pkm.social/@pseudometa>
- ResearchGate <https://www.researchgate.net/profile/Christopher-Grieser>
- LinkedIn <https://www.linkedin.com/in/christopher-grieser-ba693b17a/>



Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
